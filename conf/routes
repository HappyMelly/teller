# Application pages

GET           /                                                              controllers.core.Dashboard.index
GET           /about                                                         controllers.core.Dashboard.about
GET           /apiv2                                                         controllers.core.Dashboard.apiv2
GET           /profile                                                       controllers.core.Dashboard.profile
GET           /overview/:id                                                  controllers.core.Dashboard.overview(id: Long)

GET           /attendee/:id/event/:eventId/licenses/new                      controllers.Licenses.addForAttendee(id: Long, eventId: Long)
POST          /attendee/:id/event/:eventId/licenses/new                      controllers.Licenses.createFromAttendee(id: Long, eventId: Long)

GET           /badge/:hash/picture                                           controllers.cm.brand.Badges.picture(hash: String, size: String ?= "")

POST          /brand/:id/activation                                          controllers.Brands.activation(id: Long)
GET           /brands                                                        controllers.Brands.index
GET           /brand/new                                                     controllers.Brands.add
POST          /brand/new                                                     controllers.Brands.create
GET           /brand/:id                                                     controllers.Brands.details(id: Long)
GET           /brand/:id/tabs/coordinator                                    controllers.Brands.renderCoordinatorTabs(id: Long, tab: String)
GET           /brand/:id/tabs                                                controllers.Brands.renderTabs(id: Long, tab: String)
POST          /brand/:id/member                                              controllers.Brands.addCoordinator(id: Long)
DELETE        /brand/:id/member/:personId                                    controllers.Brands.removeCoordinator(id: Long, personId: Long)
POST          /brand/:id                                                     controllers.Brands.update(id: Long)
GET           /brand/:id/events                                              controllers.Brands.events(id: Long, future: Option[Boolean])
GET           /brand/:id/edit                                                controllers.Brands.edit(id: Long)
POST          /brand/:id/delete                                              controllers.Brands.delete(id: Long)
GET           /brand/:code/picture                                           controllers.Brands.picture(code: String)
POST          /brand/:id/picture/delete                                      controllers.Brands.deletePicture(id: Long)

POST          /brand/:id/api/activate                                        controllers.cm.brand.API.activate(id: Long)
POST          /brand/:id/api/deactivate                                      controllers.cm.brand.API.deactivate(id: Long)
GET           /brand/:id/api                                                 controllers.cm.brand.API.settings(id: Long)
POST          /brand/:id/api                                                 controllers.cm.brand.API.update(id: Long)

GET           /brand/:id/attendees/list                                      controllers.cm.event.Attendees.list(id: Long)
GET           /brand/:id/attendees                                           controllers.cm.event.Attendees.index(id: Long)

GET           /brand/:id/badges                                              controllers.cm.brand.Badges.settings(id: Long)
GET           /brand/:id/badge                                               controllers.cm.brand.Badges.add(id: Long)
POST          /brand/:id/badge                                               controllers.cm.brand.Badges.create(id: Long)
DELETE        /brand/:id/badge/:badgeId                                      controllers.cm.brand.Badges.delete(id: Long, badgeId: Long)
GET           /brand/:id/badge/:badgeId                                      controllers.cm.brand.Badges.edit(id: Long, badgeId: Long)
POST          /brand/:id/badge/:badgeId                                      controllers.cm.brand.Badges.update(id: Long, badgeId: Long)

POST          /brand/:id/coordinator/:personId/type/:notification/off        controllers.Brands.turnNotificationOff(id: Long, personId: Long, notification)
POST          /brand/:id/coordinator/:personId/type/:notification/on         controllers.Brands.turnNotificationOn(id: Long, personId: Long, notification)
GET           /brand/:id/eventrequests                                       controllers.cm.EventRequests.index(id: Long)
GET           /brand/:id/eventrequest/:requestId                             controllers.cm.EventRequests.details(id: Long, requestId: Long)

POST          /brand/:id/credits/activate                                    controllers.cm.brand.Credits.activate(id: Long)
POST          /brand/:id/credits/deactivate                                  controllers.cm.brand.Credits.deactivate(id: Long)
GET           /brand/:id/credits/settings                                    controllers.cm.brand.Credits.settings(id: Long)
POST          /brand/:id/credits/settings                                    controllers.cm.brand.Credits.update(id: Long)

GET           /brand/:brandId/eventtype                                      controllers.EventTypes.add(brandId: Long)
POST          /brand/:brandId/eventtype                                      controllers.EventTypes.create(brandId: Long)
POST          /brand/:brandId/eventtype/:id                                  controllers.EventTypes.update(brandId: Long, id: Long)
GET           /brand/:brandId/eventtype/:id/delete                           controllers.EventTypes.delete(brandId: Long, id: Long)
GET           /brand/:id/eventtypes                                          controllers.EventTypes.index(id: Long)

GET           /brand/:id/facilitators/list                                   controllers.cm.Facilitators.list(id: Long)
GET           /brand/:id/facilitators                                        controllers.cm.Facilitators.index(id: Long)
GET           /brand/:id/facilitators/find                                   controllers.cm.Facilitators.search(id: Long, query: Option[String])

POST          /brand/:id/settings/licensereminder/off                        controllers.cm.brand.Settings.turnLicenseExpirationReminderOff(id: Long)
POST          /brand/:id/settings/licensereminder/on                         controllers.cm.brand.Settings.turnLicenseExpirationReminderOn(id: Long)

POST          /brand/:brandId/link                                           controllers.BrandLinks.create(brandId: Long)
DELETE        /brand/:brandId/link/:id                                       controllers.BrandLinks.remove(brandId: Long, id: Long)

GET           /brand/:brandId/testimonial                                    controllers.BrandTestimonials.add(brandId: Long)
GET           /brand/:brandId/testimonial/:id                                controllers.BrandTestimonials.edit(brandId: Long, id: Long)
POST          /brand/:brandId/testimonial                                    controllers.BrandTestimonials.create(brandId: Long)
POST          /brand/:brandId/testimonial/:id                                controllers.BrandTestimonials.update(brandId: Long, id: Long)
DELETE        /brand/:brandId/testimonial/:id                                controllers.BrandTestimonials.remove(brandId: Long, id: Long)

GET           /brand/:id/template                                            controllers.CertificateTemplates.add(id: Long)
POST          /brand/:id/template                                            controllers.CertificateTemplates.create(id: Long)

GET           /certificate/:id                                               controllers.Certificates.certificate(id: String)
GET           /certificate/new/:eventId/:personId                            controllers.Certificates.create(eventId: Long, personId: Long)

POST          /commercial-customer/:interested                               controllers.admin.CommercialCustomers.reply(interested: Boolean)

POST          /contribution/new                                              controllers.Contributions.create(page: String)
GET           /contribution/:id/delete                                       controllers.Contributions.delete(id: Long, page: String)

GET           /credits/brand/:id                                             controllers.cm.brand.Credits.credits(id: Long)
POST          /credits/brand/:id                                             controllers.cm.brand.Credits.give(id: Long)
GET           /credits                                                       controllers.cm.brand.Credits.index()

POST          /customer/:id/card                                             controllers.core.Customers.updateCard(id: Long)
POST          /customer/:id/contribution                                     controllers.core.Customers.changeContributionLevel(id: Long)

POST          /password/reset                                                controllers.PasswordReset.handleStartResetPassword

GET           /person/:personId/endorsement                                  controllers.Endorsements.add(personId: Long)
GET           /person/:personId/endorsement/select                           controllers.Endorsements.renderSelectForm(personId: Long)
GET           /person/:personId/endorsement/:id                              controllers.Endorsements.edit(personId: Long, id: Long)
POST          /person/:personId/endorsement                                  controllers.Endorsements.create(personId: Long)
POST          /person/:personId/endorsement/:id                              controllers.Endorsements.update(personId: Long, id: Long)
DELETE        /person/:personId/endorsement/:id                              controllers.Endorsements.remove(personId: Long, id: Long)
POST          /person/:personId/endorsements/positions                       controllers.Endorsements.updatePositions(personId: Long)
POST          /person/:personId/endorsements/add                             controllers.Endorsements.createFromSelected(personId: Long)
POST          /event/:eventId/endorsement/evaluation/:evaluationId           controllers.Endorsements.createFromEvaluation(eventId: Long, evaluationId: Long)

POST          /evaluation/:id/approve                                        controllers.cm.Evaluations.approve(id: Long)
POST          /evaluation/:id/reject                                         controllers.cm.Evaluations.reject(id: Long)
POST          /evaluation/:id/confirmrequest                                 controllers.cm.Evaluations.sendConfirmationRequest(id: Long)
GET           /evaluation/public                                           controllers.cm.Evaluations.public()
GET           /evaluation/:id                                              controllers.cm.Evaluations.details(id: Long)
DELETE        /evaluation/:id                                              controllers.cm.Evaluations.delete(id: Long)
# it's important to keep confirmationId at the end of the link as it's replaced during evaluation creation
GET           /evaluation/confirm/:confirmationId                          controllers.cm.Evaluations.confirm(confirmationId: String)

POST          /person/:personId/material                                   controllers.cm.Materials.create(personId: Long)
DELETE        /person/:personId/material/:id                               controllers.cm.Materials.remove(personId: Long, id: Long)

GET           /report/create/:brandId/event/:eventId/status/:status        controllers.cm.Reports.create(brandId: Long, eventId: Long, status: Int)

GET           /reset/:token                                                controllers.PasswordReset.resetPassword(token: String)
POST          /reset/:token                                                controllers.PasswordReset.handleResetPassword(token: String)

GET           /events                                                      controllers.cm.Events.index(brandId: Long)
GET           /events/filtered                                             controllers.cm.Events.events(brandId: Long, facilitator: Option[Long], future: Option[Boolean], public: Option[Boolean], archived: Option[Boolean])
POST          /event                                                       controllers.cm.Events.create
GET           /events/new/                                                 controllers.cm.Events.add
GET           /event/:id/duplicate                                         controllers.cm.Events.duplicate(id: Long)
GET           /event/:id/edit                                              controllers.cm.Events.edit(id: Long)
GET           /event/:id/reason                                            controllers.cm.Events.reason(id: Long)
GET           /event/:id/public                                            controllers.cm.Events.public(id: String)
GET           /event/:id                                                   controllers.cm.Events.details(id: Long)
GET           /event/:id/detailsButtons                                    controllers.cm.Events.detailsButtons(id: Long)
POST          /event/:id                                                   controllers.cm.Events.update(id: Long)
POST          /event/:id/confirm                                           controllers.cm.Events.confirm(id: Long)
POST          /event/:id/cancel                                            controllers.cm.Events.cancel(id: Long)
POST          /event/:id/invoice                                           controllers.cm.event.Invoices.update(id: Long)
POST          /event/:id/send                                              controllers.cm.event.Requests.send(id: Long)
GET           /event/:id/attendee                                          controllers.cm.event.Attendees.add(id: Long)
POST          /event/:id/attendee                                          controllers.cm.event.Attendees.create(id: Long)
GET           /event/:id/attendee/:attendeeId/evaluation/new               controllers.cm.Evaluations.add(id: Long, attendeeId: Long)
POST          /event/:id/attendee/:attendeeId/evaluation/new               controllers.cm.Evaluations.create(id: Long, attendeeId: Long)
GET           /event/:id/attendee/:attendeeId                              controllers.cm.event.Attendees.details(id: Long, attendeeId: Long)
GET           /event/:id/attendee/:attendeeId/edit                         controllers.cm.event.Attendees.edit(id: Long, attendeeId: Long)
POST          /event/:id/attendee/:attendeeId                              controllers.cm.event.Attendees.update(id: Long, attendeeId: Long)
DELETE        /event/:id/attendee/:attendeeId                              controllers.cm.event.Attendees.delete(id: Long, attendeeId: Long)
GET           /event/:id/attendees                                         controllers.cm.event.Attendees.listByEvent(id: Long)

GET           /eventrequest/:id/unsubscribe                                controllers.cm.EventRequests.unsubscribe(id: String)

GET           /member/:id/experiment                                       controllers.hm.Experiments.add(id: Long)
POST          /member/:id/experiment                                       controllers.hm.Experiments.create(id: Long)
DELETE        /member/:id/experiment/:experimentId                         controllers.hm.Experiments.delete(id: Long, experimentId: Long)
DELETE        /member/:id/experiment/:experimentId/picture                 controllers.hm.Experiments.deletePicture(id: Long, experimentId: Long)
GET           /member/:id/experiment/:experimentId                         controllers.hm.Experiments.edit(id: Long, experimentId: Long)
GET           /member/:id/experiments                                      controllers.hm.Experiments.experiments(id: Long)
POST          /member/:id/experiment/:experimentId                         controllers.hm.Experiments.update(id: Long, experimentId: Long)

GET           /experiment/:id/picture                                      controllers.hm.Experiments.picture(id: Long, size: String ?= "")

POST          /facilitator/:id/country                                     controllers.cm.Facilitators.addCountry(id: Long)
POST          /facilitator/:id/language                                    controllers.cm.Facilitators.addLanguage(id: Long)
GET           /facilitator/:id/brand/:brandId/badges                       controllers.cm.Facilitators.badges(id: Long, brandId: Long)
POST          /facilitator/:id/brand/:brandId/badges                       controllers.cm.Facilitators.updateBadges(id: Long, brandId: Long)
GET           /facilitator/:id/country/:country/delete                     controllers.cm.Facilitators.deleteCountry(id: Long, country: String)
GET           /facilitator/:id/language/:lang/delete                       controllers.cm.Facilitators.deleteLanguage(id: Long, lang: String)
GET           /facilitator/:id/brand/:brandId                              controllers.cm.Facilitators.details(id: Long, brandId: Long)

GET           /license/:id/edit                                            controllers.Licenses.edit(id: Long)
POST          /license/:id                                                 controllers.Licenses.update(id: Long)
POST          /license/:id/brand/:brandId/delete                           controllers.Licenses.delete(brandId: Long, id: Long)

POST          /login-reminder                                              controllers.security.LoginReminder.handle()
GET           /login-reminder                                              controllers.security.LoginReminder.page()

GET           /members                                                     controllers.hm.Members.index
GET           /member/new                                                  controllers.hm.Members.add
GET           /member/existing/organisation                                controllers.hm.Members.addExistingOrganisation
GET           /member/existing/person                                      controllers.hm.Members.addExistingPerson
POST          /member                                                      controllers.hm.Members.create
POST          /member/existing/organisation/                               controllers.hm.Members.updateExistingOrg
POST          /member/existing/person/                                     controllers.hm.Members.updateExistingPerson
GET           /member/:id/edit                                             controllers.hm.Members.edit(id: Long)
POST          /member/:id                                                  controllers.hm.Members.update(id: Long)
POST          /member/:personId/reason                                     controllers.hm.Members.updateReason(personId: Long)
POST          /member/:id/delete                                           controllers.hm.Members.delete(id: Long)
GET           /membership/welcome                                          controllers.hm.Membership.welcome
GET           /membership/payment                                          controllers.hm.Membership.payment(orgId: Option[Long] ?= None)
POST          /membership/payment                                          controllers.hm.Membership.charge
GET           /membership/congratulations                                  controllers.hm.Membership.congratulations(orgId: Option[Long] ?= None)

GET           /notifications/:offset/:limit                                  controllers.core.Notifications.list(offset: Long, limit: Long)
POST          /notifications                                                 controllers.core.Notifications.read()
GET           /notifications/unread                                          controllers.core.Notifications.unread()

POST          /organization/:id/activation                                   controllers.core.Organisations.activation(id: Long)
GET           /organization/new                                              controllers.core.Organisations.add
POST          /organization/:id/cancel                                       controllers.core.Organisations.cancel(id: Long)
POST          /organizations                                                 controllers.core.Organisations.create
POST          /organizer                                                     controllers.core.Organisations.createOrganizer
POST          /organization/:id/delete                                       controllers.core.Organisations.delete(id: Long)
DELETE        /organization/:id/logo/delete                                  controllers.core.Organisations.deleteLogo(id: Long)
GET           /organization/:id                                              controllers.core.Organisations.details(id: Long)
GET           /organization/:id/edit                                         controllers.core.Organisations.edit(id: Long)
GET           /organizations                                                 controllers.core.Organisations.index
GET           /organization/:id/logo                                         controllers.core.Organisations.logo(id: Long)
GET           /organization/:id/name                                         controllers.core.Organisations.name(id: Long)
POST          /organization/:id                                              controllers.core.Organisations.update(id: Long)
GET           /organizations/search                                          controllers.core.Organisations.search(query: Option[String])
POST          /organization/:id/logo                                         controllers.core.Organisations.uploadLogo(id: Long)

GET           /people                                                        controllers.core.People.index

GET           /person/new                                                    controllers.core.People.add
POST          /person/new                                                    controllers.core.People.create
GET           /person/:id                                                    controllers.core.People.details(id: Long)
POST          /person/:id                                                    controllers.core.People.update(id: Long)
GET           /person/:id/edit                                               controllers.core.People.edit(id: Long)
POST          /person/:id/activation                                         controllers.core.People.activation(id: Long)
POST          /person/:id/delete                                             controllers.core.People.delete(id: Long)
POST          /person/:id/cancel                                             controllers.core.People.cancel(id: Long)
GET           /person/:id/tabs                                               controllers.core.People.renderTabs(id: Long, tab: String)

POST          /person/:id/photo/upload                                       controllers.core.ProfilePhotos.upload(id: Long)
GET           /person/:id/photo                                              controllers.core.ProfilePhotos.photo(id: Long)
DELETE        /person/:id/photo/delete                                       controllers.core.ProfilePhotos.delete(id: Long)
POST          /person/:id/photo                                              controllers.core.ProfilePhotos.update(id: Long)
GET           /person/:id/photo/choose                                       controllers.core.ProfilePhotos.choose(id: Long)


GET           /person/:id/licenses/new                                       controllers.Licenses.add(id: Long)
POST          /person/:id/licenses/new                                       controllers.Licenses.create(id: Long)

POST          /person/relation/new                                           controllers.core.People.addRelationship
GET           /person/:personId/relation/:organisationId/delete              controllers.core.People.deleteRelationship(page: String, personId: Long, organisationId: Long)

GET           /products                                                      controllers.hm.Products.index
GET           /product/new                                                   controllers.hm.Products.add
POST          /product/:id/activation                                        controllers.hm.Products.activation(id: Long)
POST          /product/new                                                   controllers.hm.Products.create
GET           /product/:id                                                   controllers.hm.Products.details(id: Long)
POST          /product/:id                                                   controllers.hm.Products.update(id: Long)
GET           /product/:id/edit                                              controllers.hm.Products.edit(id: Long)
POST          /product/:id/delete                                            controllers.hm.Products.delete(id: Long)

GET           /product/:id/picture                                           controllers.hm.Products.picture(id: Long)
POST          /product/:id/picture/delete                                    controllers.hm.Products.deletePicture(id: Long)

POST          /product/brand/new                                             controllers.hm.Products.addBrand
GET           /product/:productId/brand/:brandId/delete                      controllers.hm.Products.deleteBrand(page: String, productId: Long, brandId: Long)

GET           /profile/:id/person/membership                                 controllers.hm.Profile.membership(id: Long)
GET           /profile/:id/org/membership                                    controllers.hm.Profile.orgMembership(id: Long)
GET           /profile/:id/person/steps/:steps                               controllers.core.ProfileStrengths.personWidget(id: Long, steps: Boolean)

GET           /registration/welcome                                          controllers.Registration.welcome
GET           /registration/step1                                            controllers.Registration.step1(org: Boolean ?= false)
GET           /registration/step2                                            controllers.Registration.step2
GET           /registration/step3                                            controllers.Registration.step3
POST          /registration/save/person                                      controllers.Registration.savePerson
POST          /registration/save/org                                         controllers.Registration.saveOrg
GET           /registration/payment                                          controllers.Registration.payment
POST          /registration/payment                                          controllers.Registration.charge
GET           /registration/authenticate/:provider                           controllers.Registration.authenticate(provider)
POST          /registration/authenticate                                     controllers.Registration.authenticateByEmail
GET           /registration/congratulations                                  controllers.Registration.congratulations(orgId: Option[Long] ?= None)

POST          /person/:personId/signature                                    controllers.Signatures.upload(personId: Long)
GET           /person/:personId/signature                                    controllers.Signatures.signature(personId: Long)
POST          /person/:personId/signature/delete                             controllers.Signatures.delete(personId: Long)

GET           /brand/:brandId/statistics                                     controllers.cm.Statistics.index(brandId: Long)
GET           /brand/:brandId/statistics/type/facilitators/                  controllers.cm.Statistics.byFacilitators(brandId: Long)
GET           /brand/:brandId/statistics/type/events/                        controllers.cm.Statistics.byEvents(brandId: Long)
GET           /brand/:brandId/statistics/type/countries/                     controllers.cm.Statistics.byCountries(brandId: Long)
GET           /brand/:brandId/statistics/type/participants/                  controllers.cm.Statistics.byParticipants(brandId: Long)

GET           /template/:id                                                  controllers.CertificateTemplates.template(id: Long, single: Boolean)
GET           /template/:brandId/:id/delete                                  controllers.CertificateTemplates.delete(brandId: Long, id: Long)

POST          /markdown                                                      controllers.Utilities.markdown()
POST          /url/:url/validate                                             controllers.Utilities.validate(url)

GET           /usage                                                         controllers.admin.Usage.index

GET           /user/account                                                  controllers.core.UserAccounts.account
POST          /user/disconnect/:profileId                                    controllers.core.UserAccounts.disconnect(profileId: String)
POST          /user/newPassword                                              controllers.core.UserAccounts.handleNewPassword
POST          /user/password                                                 controllers.core.UserAccounts.changePassword
GET           /user/switch                                                   controllers.core.UserAccounts.switchRole
POST          /user/email                                                    controllers.core.UserAccounts.changeEmail
GET           /user/email/:token                                             controllers.core.UserAccounts.handleEmailChange(token: String)

POST          /webhooks/stripe                                               controllers.webhooks.Stripe.event

->            /api/v2                                                        api.Routes

# Public assets
GET           /assets/*file                                                  controllers.Assets.at(path="/public", file)

## SecureSocial
GET           /login                                                         controllers.core.LoginPage.login
GET           /logout                                                        controllers.core.LoginPage.logout(typ: Option[String] ?= None, msg: Option[String] ?= None)
GET           /authenticate/:provider                                        controllers.security.ProviderController.authenticate(provider, redirectTo: Option[String])
POST          /authenticate/:provider                                        controllers.security.ProviderController.authenticateByPost(provider, redirectTo: Option[String])
