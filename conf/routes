# Application pages

GET /          controllers.Dashboard.index
GET /about     controllers.Dashboard.about
GET /api       controllers.Dashboard.api
GET /profile   controllers.Dashboard.profile

GET  /accounts           controllers.Accounts.index
GET  /accounts/balance   controllers.Accounts.previewBalance
POST /accounts/balance   controllers.Accounts.balanceAccounts

GET  /account/:id            controllers.Accounts.details(id: Long)
GET  /account/:id/bookings   controllers.Accounts.bookings(id: Long, from: Option[org.joda.time.LocalDate] ?= None, to: Option[org.joda.time.LocalDate] ?= None)
POST /account/:id/activate   controllers.Accounts.activate(id: Long)
POST /account/:id/deactivate controllers.Accounts.deactivate(id: Long)

GET  /admin/settings                     controllers.Administration.settings
POST /admin/transactiontype/new          controllers.Administration.createTransactionType
POST /admin/transactiontype/:id/delete   controllers.Administration.deleteTransactionType(id: Long)

GET  /bookings                        controllers.BookingEntries.index
GET  /booking/new                     controllers.BookingEntries.add
POST /booking/new                     controllers.BookingEntries.create
GET  /booking/:bookingNumber          controllers.BookingEntries.details(bookingNumber: Int)
POST /booking/:bookingNumber          controllers.BookingEntries.update(bookingNumber: Int)
GET  /booking/:bookingNumber/edit     controllers.BookingEntries.edit(bookingNumber: Int)
POST /booking/:bookingNumber/delete   controllers.BookingEntries.delete(bookingNumber: Int)

GET  /booking/:bookingNumber/attachment          controllers.BookingEntries.attachFile(bookingNumber: Int, key: String)
GET  /booking/:bookingNumber/attachment          controllers.BookingEntries.s3Callback(bookingNumber: Int)
POST /booking/:bookingNumber/attachment/delete   controllers.BookingEntries.deleteAttachment(bookingNumber: Int)

GET  /brands               controllers.Brands.index
GET  /brand/new            controllers.Brands.add
POST /brand/new            controllers.Brands.create
GET  /brand/:code          controllers.Brands.details(code)
POST /brand/:code          controllers.Brands.update(code)
GET  /brand/:code/edit     controllers.Brands.edit(code)
POST /brand/:code/delete   controllers.Brands.delete(code)

GET  /brand/:code/picture          controllers.Brands.picture(code: String)
POST /brand/:code/picture/delete   controllers.Brands.deletePicture(code: String)

GET  /certificate/:id                controllers.Certificates.certificate(id: String)
GET  /certificate/new/:evaluationId  controllers.Certificates.create(evaluationId: Long)

POST /contribution/new         controllers.Contributions.create(page: String)
GET  /contribution/:id/delete  controllers.Contributions.delete(page: String, id: Long)

POST /evaluation/                controllers.Evaluations.create
GET  /evaluation/new/            controllers.Evaluations.add(eventId: Option[Long], participantId: Option[Long])
GET  /evaluation/:id/approve     controllers.Evaluations.approve(id: Long)
GET  /evaluation/:id/reject      controllers.Evaluations.reject(id: Long)
GET  /evaluation/:id/edit        controllers.Evaluations.edit(id: Long)
GET  /evaluation/:id             controllers.Evaluations.details(id: Long)
POST /evaluation/:id             controllers.Evaluations.update(id: Long)
GET  /evaluation/:id/delete      controllers.Evaluations.delete(id: Long)

GET  /evaluations/export/:code/event/:eventId/status/:status/byMe/:byMe controllers.Evaluations.export(code: String, eventId: Long, status: Int, byMe: Boolean)

GET  /events                 controllers.Events.index
POST /event                  controllers.Events.create
GET  /events/new/            controllers.Events.add
GET  /event/:id/duplicate    controllers.Events.duplicate(id: Long)
GET  /event/:id/edit         controllers.Events.edit(id: Long)
GET  /event/:id              controllers.Events.details(id: Long)
POST /event/:id              controllers.Events.update(id: Long)
POST /event/:id/confirm      controllers.Events.confirm(id: Long)
POST /event/:id/delete       controllers.Events.delete(id: Long)
POST /event/:id/invoice      controllers.Events.invoice(id: Long)

GET  /eventtypes/:brandCode  controllers.EventTypes.index(brandCode: String)
POST /eventtype/new          controllers.EventTypes.create
GET  /eventtype/:id/delete   controllers.EventTypes.delete(id: Long)

GET /exchangerate               controllers.ExchangeRates.rate
GET /exchangerate/:target/:amount controllers.ExchangeRates.convert(amount: org.joda.money.Money, target: org.joda.money.CurrencyUnit)
GET /exchangerates/:base        controllers.ExchangeRates.rates(base: org.joda.money.CurrencyUnit, require: List[org.joda.money.CurrencyUnit])

GET /facilitators/:brandCode   controllers.Facilitators.index(brandCode: String)

GET  /license/:id/edit     controllers.Licenses.edit(id: Long)
POST /license/:id          controllers.Licenses.update(id: Long)
POST /license/:id/delete   controllers.Licenses.delete(id: Long)

GET  /organizations                 controllers.Organisations.index
POST /organizations                 controllers.Organisations.create
GET  /organization/new              controllers.Organisations.add
GET  /organization/:id/edit         controllers.Organisations.edit(id: Long)
GET  /organization/:id              controllers.Organisations.details(id: Long)
POST /organization/:id              controllers.Organisations.update(id: Long)
POST /organization/:id/delete       controllers.Organisations.delete(id: Long)
POST /organization/:id/activation   controllers.Organisations.activation(id: Long)

GET  /participants                            controllers.Participants.index
GET  /participants/brand/:brandCode           controllers.Participants.participantsByBrand(brandCode: String)
GET  /participants/:eventId                   controllers.Participants.participants(eventId: Long)
GET  /participant/new/                        controllers.Participants.add
POST /participant                             controllers.Participants.create
POST /participant/newperson                   controllers.Participants.createParticipantAndPerson
GET  /participant/:eventId/:personId/delete/  controllers.Participants.delete(eventId: Long, personId: Long)

GET  /people       controllers.People.index

POST /person/signature                     controllers.People.uploadSignature
GET  /person/:personId/signature           controllers.People.signature(personId: Long)
POST /person/:personId/signature/delete    controllers.People.deleteSignature(personId: Long)

GET  /person/new              controllers.People.add
POST /person/new              controllers.People.create
GET  /person/:id              controllers.People.details(id: Long)
POST /person/:id              controllers.People.update(id: Long)
GET  /person/:id/edit         controllers.People.edit(id: Long)
POST /person/:id/activation   controllers.People.activation(id: Long)
POST /person/:id/delete       controllers.People.delete(id: Long)


GET  /person/:id/licenses/new   controllers.Licenses.add(id: Long)
POST /person/:id/licenses/new   controllers.Licenses.create(id: Long)

POST /person/membership/new                                controllers.People.addMembership
GET  /person/:personId/membership/:organisationId/delete   controllers.People.deleteMembership(page: String, personId: Long, organisationId: Long)

GET  /products             controllers.Products.index
GET  /product/new          controllers.Products.add
POST /product/new          controllers.Products.create
GET  /product/:id          controllers.Products.details(id: Long)
POST /product/:id          controllers.Products.update(id: Long)
GET  /product/:id/edit     controllers.Products.edit(id: Long)
POST /product/:id/delete   controllers.Products.delete(id: Long)

GET  /product/:id/picture          controllers.Products.picture(id: Long)
POST /product/:id/picture/delete   controllers.Products.deletePicture(id: Long)

POST /product/brand/new                         controllers.Products.addBrand
GET  /product/:productId/brand/:brandId/delete  controllers.Products.deleteBrand(page: String, productId: Long, brandId: Long)

POST /user    controllers.UserAccounts.update


# API
GET /api/v1/brands                 controllers.BrandsApi.brands
GET /api/v1/brands/grouped/status  controllers.BrandsApi.brandsByStatus
GET /api/v1/brand/:code            controllers.BrandsApi.brand(code: String)

GET /api/v1/event/:id                                       controllers.EventsApi.event(id: Long)
GET /api/v1/events/:brandCode                               controllers.EventsApi.events(brandCode: String, future: Option[Boolean], public: Option[Boolean], countryCode: Option[String], eventType: Option[Long])
GET /api/v1/events/:brandCode/facilitator/:facilitatorId    controllers.EventsApi.eventsByFacilitator(brandCode: String, facilitatorId: Long, future: Option[Boolean], public: Option[Boolean])
GET /api/v1/events/:brandCode/grouped/country               controllers.EventsApi.countries(brandCode: String)


GET /api/v1/eventtypes/:brandCode   controllers.EventTypesApi.types(brandCode: String)

GET /api/v1/facilitators/:brandCode                      controllers.FacilitatorsApi.facilitators(brandCode: String)

GET /api/v1/licensees/:brandCode                    controllers.LicensesApi.licensees(brandCode: String, date: Option[String])
GET /api/v1/licensee/:licenseeId/brand/:brandCode   controllers.LicensesApi.licensee(licenseeId: Long, brandCode: String)

GET /api/v1/people       controllers.PeopleApi.people(stakeholders_only: Option[Boolean], board_members_only: Option[Boolean])
GET /api/v1/person/:id   controllers.PeopleApi.person(id: Long)

GET /api/v1/organizations      controllers.OrganisationsApi.organisations(legal_entities_only: Option[Boolean])
GET /api/v1/organization/:id   controllers.OrganisationsApi.organisation(id: Long)

GET /api/v1/products      controllers.ProductsApi.products
GET /api/v1/product/:id   controllers.ProductsApi.product(id: Long)

GET /assets/*file   controllers.Assets.at(path="/public", file)


## SecureSocial
GET      /login                      securesocial.controllers.LoginPage.login
GET      /logout                     securesocial.controllers.LoginPage.logout


# OAuth entry points
GET      /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST     /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET      /not-authorized             securesocial.controllers.ProviderController.notAuthorized
